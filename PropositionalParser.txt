import java.io.*;
import java.util.*;

public class PropositionalParser{
  
  //helper function to determine if a character is an operator
  public boolean isOperator(char c){
    if (c == 'v' || c == '^' || c == '>'){
      return true;
    }
    return false;
  }
  
  //helper function to determine if a string is a proposition
  public boolean isProposition(String g){
    char c = g.charAt(0);
    if ((c == 'p' || c == 'q' || c == 'r')&&(g.length() ==1)){
      return true;
    }
    return false;  
  }
  
  //helper function to determine if string is a negation
  public boolean isNegation(String g){
    //must follow format "- frmla"
    if (g.charAt(0) == '-'){
      return (parse(g.substring(1)) > 0);
    }
    else{
      return false;
    }
  }
  
  //helper function to determine string is a binary formula
  public boolean isBinary(String g){
    //must follow format "(fmla BC fmla)"
    if((g.charAt(0) != '(') || (g.charAt(g.length()-1) != ')')){
      return false;
    }
    //find operator, operator must be at correct parans depth
    int operator = -1;
    int depth = 0;
    for(int i = 1; i < g.length(); i++){
      if(g.charAt(i) == '('){
        depth++;
      }
      if(g.charAt(i) == ')'){
        depth--;
      }
      if((isOperator(g.charAt(i))) && (depth == 0)){
        operator = i;
        break;
      }
    }
    
    //no operator found in correct location
    if((operator <= 1) || (operator >= g.length()-2)){
      System.out.println("no operator");
      return false;
    }
    //split into part A and B
    String a = g.substring(1, operator);
    String b = g.substring(operator+1, g.length()-1);
    //check that a and b are formulas
    return (parse(a)>0) && (parse(b)>0);
  }
  
  
  
  //returns 1 if a proposition, 2 if neg, 3 if binary, otherwise 0 
  public int parse(String g){
    //System.out.println("currently checking if " + g + " is a formula");
    int curr = 0;
    char c = g.charAt(curr); 
    //if string is empty/null, it is not a formula
    if((g == null)|| (g.equals(""))){
      return 0;
    }
    //if string is a proposition
    if (isProposition(g)){
      return 1;
    }
    //if string is binary
    else if (isBinary(g)){
      return 3;
    }
    //if string is a negation
    else if (isNegation(g)){
      return 2;
    }
    //if is not a negation , binary formula or proposition it is not valid
    else{
      //System.out.println(g + " is not a formula");
      return 0;
    }
    
  }
  
  public static void main(String[] args){
    PropositionalParser p = new PropositionalParser();
    
    try{
      File input = new File("input.txt");
      //File output = new File("output.txt");
      Scanner inputScanner = new Scanner(input);
      PrintWriter printWriter = new PrintWriter(new FileWriter("output.txt"));
      
      while(inputScanner.hasNext()){
        String g = inputScanner.nextLine();
        //System.out.println(g);
        int l = p.parse(g);
        String result = "";
        switch(l)
        {
          case(0): result = (g + " is not a formula"); break;
          case(1): result = (g + " is a proposition"); break;
          case(2): result = (g + " is a negation"); break;
          case(3): result = (g + " is a binary formula"); break;
          default: result = (g + " is not a formula"); break;
        }
        printWriter.println(result);
        System.out.println(result);
      }
      
      printWriter.close();
      inputScanner.close();
    }
    catch(Exception e){
      System.out.println(e);
      System.out.println(" input file not found, using defaults:");
      String[] defaults = {"(qvp^r)", "((p>q)v-p)", "-((p^q)v-(p>q))", "((p^--q)>(-qv-p))", "---p", "((pvq)>(-p>--q))", "-(p>(q>p))", "(pv-q)", "-(pv-p)", "((p^--q)>(-qv-p))", "-pvq"};
      for (int j = 0; j < defaults.length; j++){
        int k = p.parse(defaults[j]);
        switch(k)
        {
          case(0): System.out.println(defaults[j] + " is not a formula"); break;
          case(1): System.out.println(defaults[j] + " is a proposition"); break;
          case(2): System.out.println(defaults[j] + " is a negation"); break;
          case(3): System.out.println(defaults[j] + " is a binary formula"); break;
          default: System.out.println(defaults[j] + " is not a formula"); break;
        }
      }
    }
    return;
  }
}

