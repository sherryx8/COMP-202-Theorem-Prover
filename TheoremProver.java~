import java.io.*;
import java.util.*;
//import PropositionalParser.*;


public class TheoremProver{
 
  PropositionalParser p = new PropositionalParser();
  
  public boolean prove(String s){
     Queue<TPnode> queue = new LinkedList<TPnode>();
     TPnode head = new TPNode(s);
     queue.push(head);
     
     //while there are still nodes to be expanded
     while (!queue.isEmpty()){
       //expand 
     }
     
     //if all nodes expanded and no open branches found (?)
     return false;
  }
  
  
  public void expand(TPnode n){
    int k = p.parse(n.phrase);
    //if negation, then simplify
    //if proposition, then finish
    //if binary formula, do beta or alpha split
  }
  
  public static void main(String args[]){
   
    if(args.length > 0){
      for(int i = 0; i < args.length; i++){
       String s = args[i];
      }
    }else{
      try{}
      catch(Exception e){}
    }
  }
  
  
  
}

public class TPnode{
  boolean expanded;
  String phrase;
  TPnode parent;
  TPnode left;
  TPnode right;
  
  public TPnode(String s){
    this.expanded = false;
    this.phrase = s;
    this.left = null;
    this.right = null;
    this.parent = null;
  }


  
}